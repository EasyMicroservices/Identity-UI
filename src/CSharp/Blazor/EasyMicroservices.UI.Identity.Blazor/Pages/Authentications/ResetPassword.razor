@page "/ResetPassword"
@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.Identity.ViewModels.Authentications
@using MudBlazor
@using global::Identity.GeneratedServices;
@inject ResetPasswordViewModel viewModel;
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudStack>
        <MudPaper Class="pa-4">
            <MudStack Spacing="5">
                <MudStack Spacing="4">
                    <MudTextField @bind-Value="viewModel.Password" Label="@viewModel.GetInnerTranslatedByKey("Password")" Variant="Variant.Text" InputType="InputType.Password"></MudTextField>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Info" Disabled="viewModel.IsBusy" OnClick="@(() => viewModel.ResetPasswordCommand.Execute(null))">
                        @if (viewModel.IsBusy)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">@viewModel.GetInnerTranslatedByKey("Processing")</MudText>
                        }
                        else
                        {
                            <MudText>@viewModel.GetInnerTranslatedByKey("Save")</MudText>
                        }
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudStack>
</MudRTLProvider>

@code {
    public ResetPasswordViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }

    protected override Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri).Query;
        string queryString = uri.Split('?').LastOrDefault();
        var queryParams = queryString.Split('&')
                                     .Select(pair => pair.Split('='))
                                     .ToDictionary(pair => pair[0], pair => pair.Length > 1 ? pair[1] : "");

        string tokenValue;
        queryParams.TryGetValue("t", out tokenValue);
        viewModel.Token = tokenValue;

        viewModel.ValidateCommand.Execute(null);

        viewModel.BindPropertyChanged(StateHasChanged);
        return base.OnInitializedAsync();
    }
}